<?xml version="1.0" encoding="UTF-8"?>

<project name="builder.upload" default="default">
    <description>
            Uploader
    </description>
	
	<property environment="env"/>
	<property file="upload.properties"/>
	
	<property name="buildType" value="${openscada.release}"/>
	
	<property name="target.base" location="target"/>
	
	<property name="build.root" location="."/>
	<import file="global/lib.xml"/>

    <!-- ================================= 
          target: default              
         ================================= -->
    <target name="default" depends="gather,upload">
    </target>
	
	<!-- ================================= 
          target: clean              
         ================================= -->
    <target name="clean">
        <delete dir="gather" failonerror="false"/>
    </target>


	<!-- ================================= 
          target: gather              
         ================================= -->
    <target name="gather" depends="clean">
    	<mkdir dir="gather"/>

    	<gatherRepo name="external" repository="org.openscada.external.sdk" version="${external.version}" job="org.openscada.external-0.18"/>
    	<gatherRepo name="atlantis" repository="org.openscada.atlantis.sdk" version="${atlantis.version}" job="org.openscada.atlantis-0.18"/>
    	<gatherRepo name="aurora" repository="org.openscada.aurora.sdk" version="${aurora.version}" job="org.openscada.aurora-0.18"/>
		<gatherRepo name="oxygen" repository="org.openscada.oxygen.sdk" version="${oxygen.version}" job="org.openscada.oxygen-0.18"/>
		<gatherRepo name="utgard" repository="org.openscada.utgard.sdk" version="${utgard.version}" job="org.openscada.utgard-0.18"/>
		<gatherRepo name="orilla" repository="org.openscada.orilla.sdk" version="${orilla.version}" job="org.openscada.orilla-0.18"/>
    	<gatherRepo name="dakara" repository="org.openscada.dakara.sdk" version="${dakara.version}" job="org.openscada.dakara-0.18"/>
		<gatherRepo name="deploy" repository="org.openscada.deploy.repo" version="${deploy.version}" job="org.openscada.deploy-0.18"/>
    	<gatherRepo name="tauri" repository="org.openscada.tauri" version="${tauri.version}" job="org.openscada.tauri-0.18"/>
    	
    	<gatherProduct name="ostc" version="${othala.version}" job="org.openscada.othala-0.18"/>
    	<gatherProduct name="osvi" version="${dakara.version}" job="org.openscada.dakara.product-0.18"/>
    	
    	<gatherSetup name="ostc" job="setup.ostc-0.18"/>
    	<gatherSetup name="osvi" job="setup.osvi-0.18"/>
    </target>
	
	<!-- = = = = = = = = = = = = = = = = =
          macrodef: gatherSetup          
         = = = = = = = = = = = = = = = = = -->
    <macrodef name="gatherSetup">
        <attribute name="name" />
    	<attribute name="job"/>
    	<attribute name="buildType" default="${buildType}" />
        <sequential>
            <mkdir dir="${target.base}/download/installer/@{name}/@{buildType}"/>
        	
        	<local name="version"/>
        	<property url="${env.JENKINS_URL}/job/@{job}/lastSuccessfulBuild/artifact/output/version.properties"/>
        	<echo message="Version: ${version}"/>
        	
        	<!-- x86 version -->
        	<get
        		dest="${target.base}/download/installer/@{name}/@{buildType}"
        		src="${env.JENKINS_URL}/job/@{job}/lastSuccessfulBuild/artifact/output/@{name}_${version}_win32.win32.x86.msi"
        		usetimestamp="true"/>
        	
        	<!-- x86_64 version -->
        	<get
        		dest="${target.base}/download/installer/@{name}/@{buildType}"
        		src="${env.JENKINS_URL}/job/@{job}/lastSuccessfulBuild/artifact/output/@{name}_${version}_win32.win32.x86_64.msi"
        		usetimestamp="true"/>
        	
        </sequential>
    </macrodef>

	
	<!-- = = = = = = = = = = = = = = = = =
          macrodef: gatherProduct          
         = = = = = = = = = = = = = = = = = -->
    <macrodef name="gatherProduct">
    	<attribute name="name"/>
    	<attribute name="job"/>
    	<attribute name="version"/>
    	<attribute name="buildType" default="${buildType}"/>
        <sequential>
        	<!-- create download dir -->
        	        	
        	<delete dir="${target.base}/download/@{name}/@{buildType}/@{version}" failonerror="false"/>
        	<mkdir dir="${target.base}/download/@{name}/@{buildType}/@{version}"/>
        	
        	<!-- copy to download -->
        	
        	<foreach list="${configs}" delimiter="&amp;" param="config" trim="true" target="targetGatherProduct">
        		<param name="job" value="@{job}"/>
        		<param name="name" value="@{name}"/>
        		<param name="version" value="@{version}"/>
        		<param name="buildType" value="@{buildType}"/>
        	</foreach>
        	
        </sequential>
    </macrodef>
	
	<!-- ================================= 
          target: targetGatherProduct              
         ================================= -->
    <target name="targetGatherProduct">
    	<propertyregex property="configCleaned1" input="${config}" regexp=" +" replace=""/>
    	<propertyregex property="configCleaned" input="${configCleaned1}" regexp="," replace="."/>
    	<echo message="Processing config: ${configCleaned}"/>
		<get
			dest="${target.base}/download/${name}/${buildType}/${version}"
			src="${env.JENKINS_URL}/job/${job}/lastSuccessfulBuild/artifact/output/${name}/${name}-${configCleaned}.zip"
			usetimestamp="true"/>
    </target>
	
	<!-- = = = = = = = = = = = = = = = = =
          macrodef: gatherRepo          
         = = = = = = = = = = = = = = = = = -->
    <macrodef name="gatherRepo">
        <attribute name="name"/>
    	<attribute name="job"/>
    	<attribute name="version"/>
    	<attribute name="repository"/>
    	<attribute name="buildType" default="${buildType}"/>
        <sequential>
        	
        	<!-- create download dir -->
        	
        	<delete dir="${target.base}/download/@{name}/@{buildType}/@{version}" failonerror="false"/>
        	<mkdir dir="${target.base}/download/@{name}/@{buildType}/@{version}"/>
        	
        	<!-- copy to download -->
        	
        	<get dest="${target.base}/download/@{name}/@{buildType}/@{version}" src="${env.JENKINS_URL}/job/@{job}/lastSuccessfulBuild/artifact/output/@{repository}-@{version}-p2repo.zip" usetimestamp="true"/>
        	<get dest="${target.base}/download/@{name}/@{buildType}/@{version}" src="${env.JENKINS_URL}/job/@{job}/lastSuccessfulBuild/artifact/output/@{repository}-@{buildType}.@{version}.zip" usetimestamp="true"/>

        	<!-- create repo dir -->
        	
        	<delete dir="${target.base}/repo/p2/@{name}/@{buildType}/@{version}" failonerror="false"/>
        	<mkdir dir="${target.base}/repo/p2/@{name}/@{buildType}/@{version}"/>

        	<!-- unzip repo -->
        	
        	<unzip dest="${target.base}/repo/p2/@{name}/@{buildType}/@{version}" src="${target.base}/download/@{name}/@{buildType}/@{version}/@{repository}-@{version}-p2repo.zip"/>
        	
        </sequential>
    </macrodef>

	
	<!-- ================================= 
          target: upload              
         ================================= -->
    <target name="upload" depends="clean">
    	<exec executable="rsync">
    		<arg value="-avz"/>
    		<arg value="--delete"/>
    		<arg value="${target.base}/download/"/>
    		<arg value="${env.PUBLISH_TARGET}/download/"/>
    	</exec>
    	<exec executable="rsync">
    		<arg value="-avz"/>
    		<arg value="--delete"/>
    		<arg value="${target.base}/repo/"/>
    		<arg value="${env.PUBLISH_TARGET}/repo/"/>
    	</exec>
    </target>

</project>
